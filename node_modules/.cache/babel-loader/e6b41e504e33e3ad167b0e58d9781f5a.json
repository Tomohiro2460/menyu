{"ast":null,"code":"var _jsxFileName = \"/Users/nishimuratomohiro/Capstone2/capstone2/menyu/src/components/Pages/Home.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { listRestrants } from '../../graphql/queries';\nimport { createRestrant } from '../../graphql/mutations';\nimport { AmplifySignOut } from '@aws-amplify/ui-react';\nimport Storage from '@aws-amplify/storage';\nimport { API } from '@aws-amplify/api';\nimport { graphqlOperation } from '@aws-amplify/api-graphql';\nimport { v4 as uuid } from 'uuid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Home = props => {\n  _s();\n\n  const [nameState, setNameState] = useState('');\n  const [selectedLogo, setSelectedLogo] = useState(null);\n  const [restrants, setRestrants] = useState([]);\n  const bucket = props.bucket_info.bucket_name;\n  const region = props.bucket_info.bucket_region;\n  useEffect(() => {\n    fetchRestrants();\n  }, []);\n\n  async function fetchRestrants() {\n    try {\n      const restrantsData = await API.graphql(graphqlOperation(listRestrants));\n      const restrants = restrantsData.data.listRestrants.items;\n      console.log(\"from fetchRestrant\");\n      console.log(restrants);\n      setRestrants(restrants);\n      /*\n      const restrantsState = await Promise.all(restrants.map(async (restrant) => {\n          return {\n              id: restrant.id,\n              name: restrant.name,\n              logoUrl: logoUrl\n          }\n      }));\n      console.log(restrantsState);\n      setRestrants(restrantsState)\n      */\n    } catch (err) {\n      console.log('error fetching restrants');\n    }\n  }\n  /*\n  async function fetchLogoUrl(bucket, region, key) {\n      try {\n          \n      } catch (err) { console.log('error fetching images ')}\n      const [, , keyWithoutPrefix] = /([^/]+\\/){2}(.*)$/.exec(key) || key;\n      \n      const url = await Storage.get(keyWithoutPrefix, {bucket, region, })\n  }\n  */\n\n\n  async function addRestrantHandler() {\n    if (!nameState || !selectedLogo) return; //first add image to s3\n\n    const extension = selectedLogo.name.split(\".\")[1];\n    const {\n      type: mimeType\n    } = selectedLogo;\n    const key = `${uuid()}${nameState}.${extension}`;\n    const url = `https://${bucket}.s3.${region}.amazonaws.com/public/${key}`;\n    const inputData = {\n      name: nameState,\n      image: url\n    };\n\n    try {\n      await Storage.put(key, selectedLogo, {\n        contentType: mimeType\n      });\n      await API.graphql(graphqlOperation(createRestrant, {\n        input: inputData\n      }));\n      setNameState('');\n      setSelectedLogo(null);\n      setRestrants(() => {\n        return [...restrants, {\n          name: nameState,\n          image: url\n        }];\n      });\n      /*\n      let file;\n       const { name, type: mimeType } = selectedLogo;\n      const [, , , extension] = /([^.]+)(\\.(\\w+))?$/.exec(name);\n       const bucket = props.bucket_info.bucket_name;\n      const region = props.bucket_info.bucket_region;\n      const visibility = 'public';\n      const { identityId } = await Auth.currentCredentials();\n       const key = `${visibility}/${identityId}/${uuid()}${extension && '.'}${extension}`;\n       file = {\n          bucket,\n          key,\n          region,\n          mimeType,\n          localUri: selectedLogo,\n      };\n       await props.client.mutate({\n          mutation: gql(createRestrant),\n          variables: {\n              input: {\n                  name: nameState,\n                  logo: file,\n              }\n          }\n      })\n      */\n    } catch (err) {\n      console.log('error creating restrants:', err);\n    }\n  }\n\n  const nameChangeHandler = event => {\n    event.preventDefault();\n    setNameState(event.target.value);\n  };\n\n  const logoChangeHandler = event => {\n    setSelectedLogo(event.target.files[0]);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Hello, \", props.user.username]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: nameState,\n        onChange: nameChangeHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        onChange: logoChangeHandler,\n        accept: \"image/png, image/jpeg\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: addRestrantHandler,\n      children: \"Add Restrant\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 17\n    }, this), restrants.map((restrant, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: restrant.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 29\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: restrant.image\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 29\n      }, this)]\n    }, restrant.id ? restrant.id : index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 25\n    }, this)), /*#__PURE__*/_jsxDEV(AmplifySignOut, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Home, \"cpNsOKaZ/ARaPkyzJpfpEl8uOvE=\");\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/nishimuratomohiro/Capstone2/capstone2/menyu/src/components/Pages/Home.js"],"names":["React","useEffect","useState","listRestrants","createRestrant","AmplifySignOut","Storage","API","graphqlOperation","v4","uuid","Home","props","nameState","setNameState","selectedLogo","setSelectedLogo","restrants","setRestrants","bucket","bucket_info","bucket_name","region","bucket_region","fetchRestrants","restrantsData","graphql","data","items","console","log","err","addRestrantHandler","extension","name","split","type","mimeType","key","url","inputData","image","put","contentType","input","nameChangeHandler","event","preventDefault","target","value","logoChangeHandler","files","user","username","map","restrant","index","id"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\n\nimport { listRestrants } from '../../graphql/queries';\nimport { createRestrant } from '../../graphql/mutations';\nimport { AmplifySignOut } from '@aws-amplify/ui-react';\n\nimport Storage from '@aws-amplify/storage';\nimport { API } from '@aws-amplify/api';\nimport { graphqlOperation } from '@aws-amplify/api-graphql';\n\nimport {v4 as uuid} from 'uuid';\n\nconst Home = (props) => {\n    const [nameState, setNameState] = useState('');\n    const [selectedLogo, setSelectedLogo] = useState(null);\n\n    const [restrants, setRestrants] = useState([]);\n\n    const bucket = props.bucket_info.bucket_name;\n    const region = props.bucket_info.bucket_region;\n\n    useEffect(() => {\n        fetchRestrants()\n    }, [])\n\n\n    async function fetchRestrants() {\n        try {\n          const restrantsData = await API.graphql(graphqlOperation(listRestrants))\n          const restrants = restrantsData.data.listRestrants.items\n          console.log(\"from fetchRestrant\");\n          console.log(restrants);\n          setRestrants(restrants);\n          /*\n          const restrantsState = await Promise.all(restrants.map(async (restrant) => {\n              return {\n                  id: restrant.id,\n                  name: restrant.name,\n                  logoUrl: logoUrl\n              }\n          }));\n          console.log(restrantsState);\n          setRestrants(restrantsState)\n          */\n        } catch (err) { console.log('error fetching restrants') }\n    }\n\n    /*\n    async function fetchLogoUrl(bucket, region, key) {\n        try {\n            \n        } catch (err) { console.log('error fetching images ')}\n        const [, , keyWithoutPrefix] = /([^/]+\\/){2}(.*)$/.exec(key) || key;\n        \n        const url = await Storage.get(keyWithoutPrefix, {bucket, region, })\n    }\n    */\n\n\n    async function addRestrantHandler() {\n        if (!nameState || !selectedLogo) return\n        \n        //first add image to s3\n        const extension = selectedLogo.name.split(\".\")[1];\n        const { type: mimeType } = selectedLogo;\n        const key = `${uuid()}${nameState}.${extension}`\n        const url = `https://${bucket}.s3.${region}.amazonaws.com/public/${key}`;\n        const inputData = { name: nameState, image: url }\n        try {\n            await Storage.put(key, selectedLogo, {contentType: mimeType})\n            await API.graphql(graphqlOperation(createRestrant, { input: inputData }))\n\n            setNameState('');\n            setSelectedLogo(null);\n            setRestrants(() => {\n                return [...restrants, {name: nameState, image: url}]\n            })\n\n            /*\n            let file;\n\n            const { name, type: mimeType } = selectedLogo;\n            const [, , , extension] = /([^.]+)(\\.(\\w+))?$/.exec(name);\n\n            const bucket = props.bucket_info.bucket_name;\n            const region = props.bucket_info.bucket_region;\n            const visibility = 'public';\n            const { identityId } = await Auth.currentCredentials();\n\n            const key = `${visibility}/${identityId}/${uuid()}${extension && '.'}${extension}`;\n\n            file = {\n                bucket,\n                key,\n                region,\n                mimeType,\n                localUri: selectedLogo,\n            };\n\n            await props.client.mutate({\n                mutation: gql(createRestrant),\n                variables: {\n                    input: {\n                        name: nameState,\n                        logo: file,\n                    }\n                }\n            })\n            */\n        } catch (err) {\n            console.log('error creating restrants:', err);\n        }\n    }\n\n\n    const nameChangeHandler = (event) => {\n        event.preventDefault();\n        setNameState(event.target.value);\n    }\n\n    const logoChangeHandler = (event) => {\n        setSelectedLogo(event.target.files[0]);\n    }\n\n\n\n    return (\n        <div>\n            <div>Hello, {props.user.username}</div>\n                <div>\n                    <input type='text' value={nameState} onChange={nameChangeHandler}/>\n                </div>\n                <div>\n                    <input type='file' onChange={logoChangeHandler} accept=\"image/png, image/jpeg\"/>\n                </div>\n                <button onClick={addRestrantHandler}>Add Restrant</button>\n                {\n                    restrants.map((restrant, index) => (\n                        <div key={restrant.id ? restrant.id : index}>\n                            <p>{restrant.name}</p>\n                            <img src={restrant.image}></img>\n                        </div>\n                    ))\n                }\n                <AmplifySignOut />\n        </div>\n    );\n}\n\nexport default Home;"]},"metadata":{},"sourceType":"module"}