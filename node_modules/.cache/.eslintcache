[{"/Users/nishimuratomohiro/Capstone2/capstone2/menyu/src/index.js":"1","/Users/nishimuratomohiro/Capstone2/capstone2/menyu/src/App.js":"2","/Users/nishimuratomohiro/Capstone2/capstone2/menyu/src/reportWebVitals.js":"3","/Users/nishimuratomohiro/Capstone2/capstone2/menyu/src/aws-exports.js":"4","/Users/nishimuratomohiro/Capstone2/capstone2/menyu/src/graphql/queries.js":"5","/Users/nishimuratomohiro/Capstone2/capstone2/menyu/src/graphql/mutations.js":"6","/Users/nishimuratomohiro/Capstone2/capstone2/menyu/src/context/auth-process-context.js":"7","/Users/nishimuratomohiro/Capstone2/capstone2/menyu/src/components/Pages/Welcome.js":"8","/Users/nishimuratomohiro/Capstone2/capstone2/menyu/src/components/Layout/Header.js":"9","/Users/nishimuratomohiro/Capstone2/capstone2/menyu/src/components/Layout/HeaderLoginButton.js":"10","/Users/nishimuratomohiro/Capstone2/capstone2/menyu/src/components/Layout/GetStartedButton.js":"11","/Users/nishimuratomohiro/Capstone2/capstone2/menyu/src/components/Layout/Bodytop.js":"12","/Users/nishimuratomohiro/Capstone2/capstone2/menyu/src/components/Layout/BodyTop.js":"13","/Users/nishimuratomohiro/Capstone2/capstone2/menyu/src/components/Layout/BodyBottom.js":"14","/Users/nishimuratomohiro/Capstone2/capstone2/menyu/src/components/Layout/Footer.js":"15","/Users/nishimuratomohiro/Capstone2/capstone2/menyu/src/components/Pages/Home.js":"16","/Users/nishimuratomohiro/Capstone2/capstone2/menyu/src/components/Pages/Menu.js":"17","/Users/nishimuratomohiro/Capstone2/capstone2/menyu/src/components/Pages/AuthPage.js":"18","/Users/nishimuratomohiro/Capstone2/capstone2/menyu/src/components/Layout/MenyuButton.js":"19","/Users/nishimuratomohiro/Capstone2/capstone2/menyu/src/components/Layout/EditMenu.js":"20","/Users/nishimuratomohiro/Capstone2/capstone2/menyu/src/components/Layout/HomeHeader.js":"21","/Users/nishimuratomohiro/Capstone2/capstone2/menyu/src/components/Layout/CreateRestaurant.js":"22","/Users/nishimuratomohiro/Capstone2/capstone2/menyu/src/components/Layout/EditRestaurant.js":"23","/Users/nishimuratomohiro/Capstone2/capstone2/menyu/src/components/Layout/DropDownMenu.js":"24"},{"size":419,"mtime":1635116942097,"results":"25","hashOfConfig":"26"},{"size":4059,"mtime":1636516125586,"results":"27","hashOfConfig":"26"},{"size":362,"mtime":1634243407037,"results":"28","hashOfConfig":"26"},{"size":1295,"mtime":1635116942093,"results":"29","hashOfConfig":"26"},{"size":2947,"mtime":1636516125596,"results":"30","hashOfConfig":"26"},{"size":4714,"mtime":1636516125595,"results":"31","hashOfConfig":"26"},{"size":163,"mtime":1634501061705,"results":"32","hashOfConfig":"26"},{"size":386,"mtime":1636516125594,"results":"33","hashOfConfig":"26"},{"size":648,"mtime":1636516125589,"results":"34","hashOfConfig":"26"},{"size":520,"mtime":1634501061704,"results":"35","hashOfConfig":"26"},{"size":566,"mtime":1634501061703,"results":"36","hashOfConfig":"26"},{"size":408,"mtime":1634505280884,"results":"37","hashOfConfig":"26"},{"size":1126,"mtime":1634600078394,"results":"38","hashOfConfig":"26"},{"size":1269,"mtime":1634534000891,"results":"39","hashOfConfig":"26"},{"size":956,"mtime":1636516125588,"results":"40","hashOfConfig":"26"},{"size":5092,"mtime":1636516125592,"results":"41","hashOfConfig":"26"},{"size":1035,"mtime":1636516125593,"results":"42","hashOfConfig":"26"},{"size":768,"mtime":1636516125591,"results":"43","hashOfConfig":"26"},{"size":312,"mtime":1636516125590,"results":"44","hashOfConfig":"26"},{"size":32887,"mtime":1637537602655,"results":"45","hashOfConfig":"26"},{"size":483,"mtime":1636516125590,"results":"46","hashOfConfig":"26"},{"size":2188,"mtime":1636516125586,"results":"47","hashOfConfig":"26"},{"size":6596,"mtime":1637508241135,"results":"48","hashOfConfig":"26"},{"size":305,"mtime":1636516125586,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"14fayim",{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"52"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"52"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"52"},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"52"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"52"},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"52"},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"52"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98"},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"52"},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"/Users/nishimuratomohiro/Capstone2/capstone2/menyu/src/index.js",[],["108","109"],"/Users/nishimuratomohiro/Capstone2/capstone2/menyu/src/App.js",["110","111"],"/* src/App.js */\nimport React, { useState, useEffect } from 'react'\nimport { Route, Switch, Redirect } from 'react-router-dom';\n\nimport Welcome from './components/Pages/Welcome';\nimport Home from './components/Pages/Home';\nimport Menu from './components/Pages/Menu';\nimport AuthPage from './components/Pages/AuthPage';\nimport AuthProcessContext from './context/auth-process-context';\n\nimport Amplify, { Auth } from 'aws-amplify';\n\nimport { AmplifyAuthenticator } from '@aws-amplify/ui-react';\nimport { AuthState, onAuthUIStateChange } from '@aws-amplify/ui-components';\nimport awsconfig from './aws-exports';\n\nAmplify.configure(awsconfig);\n\nconst S3_BUCKET_REGION = awsconfig.aws_user_files_s3_bucket_region\nconst S3_BUCKET_NAME = awsconfig.aws_user_files_s3_bucket\n\n/*\nconst client = new AWSAppSyncClient({\n  url: GRAPHQL_API_ENDPOINT_URL,\n  region: GRAPHQL_API_REGION,\n  auth: {\n    type: AUTH_TYPE,\n    // Get the currently logged in users credential.\n    jwtToken: async () => (await Auth.currentSession()).getAccessToken().getJwtToken(),\n  },\n  // Amplify uses Amazon IAM to authorize calls to Amazon S3. This provides the relevant IAM credentials.\n  complexObjectsCredentials: () => Auth.currentCredentials()\n});\n\n*/\nconst bucket_info = {bucket_name: S3_BUCKET_NAME, bucket_region: S3_BUCKET_REGION}\n\n\nconst App = () => {\n  const [authState, setAuthState] = useState();\n  const [user, setUser] = useState();\n\n  const [inAuthProcess, setInAuthProcess] = useState(false);\n  const [isSigningUp, setIsSigningUp] = useState(false);\n\n  const signinHandler = () => {\n    setInAuthProcess(true);\n    setIsSigningUp(false);\n  }\n\n  const signupHandler = () => {\n    setInAuthProcess(true);\n    setIsSigningUp(true);\n  }\n\n  useEffect(() => {\n      return onAuthUIStateChange((nextAuthState, authData) => {\n          setAuthState(nextAuthState);\n          console.log(\"hello from onAuthUIStateChange\");\n          setUser(authData)\n      });\n  }, []);\n\n  useEffect(() => {\n    if (authState === AuthState.SignedIn) {\n      setInAuthProcess(false);\n      setIsSigningUp(false);\n    }\n  },[authState]);\n\n  useEffect(() => {\n    fetchSession()\n  }, [])\n\n  const resetAuthState = () => {\n    setInAuthProcess(false);\n    setIsSigningUp(false);\n  }\n\n  async function fetchSession() {\n    try {\n      console.log('from fetchSession');\n      const session = await Auth.currentSession();\n      const authUser = await Auth.currentAuthenticatedUser();\n      if (session && authUser) {\n        console.log(\"here\")\n        setAuthState(AuthState.SignedIn);\n        setUser(authUser.username)\n      }\n      console.log(session);\n      console.log(authUser);\n    } catch(err) {\n      console.log(\"error fetching session\");\n    }\n  }\n\n  /*\n        <Home user={user} client={client} bucket_info={bucket_info}/>\n        */\n       /*\n    return authState === AuthState.SignedIn && user ? (\n        <Home user={user} bucket_info={bucket_info}/>\n    ) : (\n      <AuthProcessContext.Provider\n        value={{\n          onSignIn: signinHandler,\n          onSignUp: signupHandler,\n        }}\n      >\n        {!inAuthProcess && <Welcome />}\n        {inAuthProcess && \n          <AmplifyAuthenticator \n            initialAuthState={isSigningUp ? AuthState.SignUp : AuthState.SignIn }\n          ></AmplifyAuthenticator>\n        }\n      </AuthProcessContext.Provider>\n  );\n  */\n  return (\n    <Switch>\n      <Route path='/' exact>\n        {\n          (authState === AuthState.SignedIn && user ) ? (\n            <Home user={user} bucket_info={bucket_info} />\n          ) : (\n            <AuthProcessContext.Provider\n              value={{\n                onSignIn: signinHandler,\n                onSignUp: signupHandler,\n              }}\n            >\n              {!inAuthProcess && <Welcome />}\n              {inAuthProcess && <AuthPage isSigningUp={isSigningUp} onResetAuthState={resetAuthState}/>}\n            </AuthProcessContext.Provider>\n          )\n        }\n      </Route>\n      <Route path='/menu/:restrantId'>\n        <Menu />\n      </Route>\n    </Switch>\n  );\n}\n\nexport default App","/Users/nishimuratomohiro/Capstone2/capstone2/menyu/src/reportWebVitals.js",[],"/Users/nishimuratomohiro/Capstone2/capstone2/menyu/src/aws-exports.js",[],"/Users/nishimuratomohiro/Capstone2/capstone2/menyu/src/graphql/queries.js",[],"/Users/nishimuratomohiro/Capstone2/capstone2/menyu/src/graphql/mutations.js",[],"/Users/nishimuratomohiro/Capstone2/capstone2/menyu/src/context/auth-process-context.js",[],"/Users/nishimuratomohiro/Capstone2/capstone2/menyu/src/components/Pages/Welcome.js",[],"/Users/nishimuratomohiro/Capstone2/capstone2/menyu/src/components/Layout/Header.js",[],"/Users/nishimuratomohiro/Capstone2/capstone2/menyu/src/components/Layout/HeaderLoginButton.js",[],"/Users/nishimuratomohiro/Capstone2/capstone2/menyu/src/components/Layout/GetStartedButton.js",["112"],"import Auth from '@aws-amplify/auth';\nimport React, { useContext } from 'react';\n\nimport AuthProcessContext from '../../context/auth-process-context';\n\nimport classes from './GetStartedButton.module.css';\n\nconst GetStartedButton = () => {\n    const ctx = useContext(AuthProcessContext);\n\n    const ClickHandler = () => {\n        console.log(\"get started button pressed\");\n        ctx.onSignUp();\n    }\n    return (\n        <button className={classes.button} onClick={ClickHandler}>\n            Get started\n        </button>\n    )\n\n}\n\nexport default GetStartedButton;","/Users/nishimuratomohiro/Capstone2/capstone2/menyu/src/components/Layout/Bodytop.js",[],"/Users/nishimuratomohiro/Capstone2/capstone2/menyu/src/components/Layout/BodyTop.js",["113"],"import React from 'react';\n\nimport classes from './BodyTop.module.css';\nimport image from '../../assets/images/meeting.png';\n\nimport GetStartedButton from './GetStartedButton';\n\n\nconst BodyTop = () => {\n    return (\n        <div className={classes.bodytop}>\n            <div className={classes.content}>\n                <div className={classes.left}>\n                    <div className ={classes.textarea}> \n                        <h1 className={classes.boldText}>\n                            Never let customers regret with their menu choice.\n                        </h1>\n                        <h5 className={classes.text}>\n                            Simply put your memu.<br></br>\n                            You are going to give your costomers the best user experience with memu pick up.\n                        </h5>\n                    </div>\n                    <GetStartedButton />\n                </div>\n                <div className={classes.right}>\n                    <img className={classes.image} src={image}></img>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default BodyTop;","/Users/nishimuratomohiro/Capstone2/capstone2/menyu/src/components/Layout/BodyBottom.js",["114","115"],"import React from 'react';\n\nimport classes from './BodyBottom.module.css';\nimport phoneImage from '../../assets/images/phone.png';\nimport QRcodeImage from '../../assets/images/QRcode.png';\n\n\n\nconst BodyBottom = () => {\n    return (\n        <div className={classes.bodybottom}>\n            <div className={classes.content}>\n                <div className={classes.left}>\n                    <div className={classes.textarea}>\n                        <h1 className={classes.boldtext}>\n                            You will no longer let customers think about what they should get.\n                        </h1>\n                        <h5 className={classes.text}>\n                            Your customers will scan a QR chip at a table, and they will see all the menu items in a familiar template.\n                        </h5>\n                    </div>\n                    <img className={classes.QRcodeImage} src={QRcodeImage}></img>\n                    <button className ={classes.button}>Check out sample menyu</button>\n                </div>\n                <div className={classes.right}>\n                    <img className={classes.phoneImage} src={phoneImage}></img>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default BodyBottom;","/Users/nishimuratomohiro/Capstone2/capstone2/menyu/src/components/Layout/Footer.js",[],"/Users/nishimuratomohiro/Capstone2/capstone2/menyu/src/components/Pages/Home.js",["116"],"import React, { useEffect, useState } from 'react';\n\nimport { listRestaurants } from '../../graphql/queries';\nimport { getRestaurant } from '../../graphql/queries';\n\nimport { API } from '@aws-amplify/api';\nimport { graphqlOperation } from '@aws-amplify/api-graphql';\n\nimport {v4 as uuid} from 'uuid';\n\nimport classes from './Home.module.css'\nimport HomeHeader from '../Layout/HomeHeader';\nimport Footer from '../Layout/Footer';\n\n\nimport CreateRestaurant from '../Layout/CreateRestaurant';\nimport EditMenu from '../Layout/EditMenu';\nimport EditRestaurant from '../Layout/EditRestaurant';\n\nconst Home = (props) => {\n    const bucket = props.bucket_info.bucket_name;\n    const region = props.bucket_info.bucket_region;\n\n    const [restaurant, setRestaurant] = useState({id: '', name: '', logo: '', categories: {items: []}});\n\n    console.log('rendering Home');\n\n    useEffect(() => {\n        console.log(\"useEffect of Home called\")\n        fetchRestaurants()\n    }, [])\n\n    async function fetchRestaurants() {\n        try {\n          const restrantsData = await API.graphql(graphqlOperation(listRestaurants))\n          const restrants = restrantsData.data.listRestaurants.items\n          const restrantByGetData = await API.graphql(graphqlOperation(getRestaurant, {id: restrants[0].id}));\n          console.log(\"Restaurant by Get\", restrantByGetData);\n          console.log('restrant id:', restrants[0].id)\n          console.log(\"from fetchRestrant\");\n          console.log(restrants);\n          setRestaurant(restrantByGetData.data.getRestaurant);\n        } catch (err) {\n            console.log('error fetching restrants', err);\n            setRestaurant(null);\n        }\n    }\n\n    return (\n        <div className={classes.container}>\n            <HomeHeader />\n            <div>Hello, {props.user.username}</div>\n            {\n                (restaurant) ? (\n                    <div>\n                        <EditRestaurant bucket={bucket} region={region} restaurant={restaurant} restaurantSetter={setRestaurant}/>\n                        <EditMenu bucket={bucket} region={region} restaurant={restaurant} restaurantSetter={setRestaurant} />\n                    </div>\n                ) : (\n                    <CreateRestaurant bucket={bucket} region={region} restaurantSetter={setRestaurant}/>\n                )\n            }\n            <Footer />\n        </div>\n    );\n}\n\nexport default Home;\n\n/*\nconst Home = (props) => {\n    const [nameState, setNameState] = useState('');\n    const [selectedLogo, setSelectedLogo] = useState(null);\n\n    const [restrants, setRestrants] = useState([]);\n\n    const bucket = props.bucket_info.bucket_name;\n    const region = props.bucket_info.bucket_region;\n\n    useEffect(() => {\n        fetchRestrants()\n    }, [])\n\n\n    async function fetchRestrants() {\n        try {\n          const restrantsData = await API.graphql(graphqlOperation(listRestrants))\n          const restrants = restrantsData.data.listRestrants.items\n          console.log(\"from fetchRestrant\");\n          console.log(restrants);\n          setRestrants(restrants);\n        } catch (err) { console.log('error fetching restrants') }\n    }\n\n\n\n    async function addRestrantHandler() {\n        if (!nameState || !selectedLogo) return\n        \n        //first add image to s3\n        const extension = selectedLogo.name.split(\".\")[1];\n        const { type: mimeType } = selectedLogo;\n        const key = `${uuid()}${nameState}.${extension}`\n        const url = `https://${bucket}.s3.${region}.amazonaws.com/public/${key}`;\n        const inputData = { name: nameState, image: url }\n        try {\n            await Storage.put(key, selectedLogo, {contentType: mimeType})\n            await API.graphql(graphqlOperation(createRestrant, { input: inputData }))\n\n            setNameState('');\n            setSelectedLogo(null);\n            setRestrants(() => {\n                return [...restrants, {name: nameState, image: url}]\n            })\n\n        } catch (err) {\n            console.log('error creating restrants:', err);\n        }\n    }\n\n\n    const nameChangeHandler = (event) => {\n        event.preventDefault();\n        setNameState(event.target.value);\n    }\n\n    const logoChangeHandler = (event) => {\n        setSelectedLogo(event.target.files[0]);\n    }\n\n\n\n    return (\n        <div>\n            <div>Hello, {props.user.username}</div>\n                <div>\n                    <input type='text' value={nameState} onChange={nameChangeHandler}/>\n                </div>\n                <div>\n                    <input type='file' onChange={logoChangeHandler} accept=\"image/png, image/jpeg\"/>\n                </div>\n                <button onClick={addRestrantHandler}>Add Restrant</button>\n                {\n                    restrants.map((restrant, index) => (\n                        <div key={restrant.id ? restrant.id : index}>\n                            <p>{restrant.name}</p>\n                            <img src={restrant.image}></img>\n                        </div>\n                    ))\n                }\n                <AmplifySignOut />\n        </div>\n    );\n}\n*/","/Users/nishimuratomohiro/Capstone2/capstone2/menyu/src/components/Pages/Menu.js",["117","118","119","120","121"],"import React from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\n\nimport API from '@aws-amplify/api';\nimport { graphqlOperation } from '@aws-amplify/api-graphql';\n\nconst Menu = () => {\n    /*\n    const params = useParams();\n\n    const [restrantLogo, setRestrantLogo] = useState(null);\n\n    useEffect(() => {\n        fetchRestrant();\n    }, [])\n\n    const fetchRestrant = async () => {\n        try {\n          const restrantData = await API.graphql({\n              query: getRestrant,\n              variables: {id: params.restrantId},\n              authMode: 'API_KEY'\n          });\n          setRestrantLogo(restrantData.data.getRestrant.image)\n          console.log(\"from fetchRestrant\");\n          console.log(restrantData);\n        } catch(err) {\n            console.log('error fetching restrants from menu:', err)\n        }\n\n    }\n\n    console.log(params.restrantId);\n\n    */\n    return (\n        <div>\n            hello this is menu\n        </div>\n    )\n}\n\nexport default Menu;","/Users/nishimuratomohiro/Capstone2/capstone2/menyu/src/components/Pages/AuthPage.js",["122","123","124"],"import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport MenyuButton from '../Layout/MenyuButton';\n\nimport { AmplifyAuthenticator, AmplifySignIn, AmplifySignUp } from '@aws-amplify/ui-react';\nimport { AuthState } from '@aws-amplify/ui-components';\n\nimport classes from './AuthPage.module.css';\n\nconst AuthPage = (props) => {\n    const buttonClickHandler = () => {\n        props.onResetAuthState();\n    }\n\n    return (\n        <div>\n            <MenyuButton classes={classes.button} onClickHandler={buttonClickHandler} />\n            <AmplifyAuthenticator \n                initialAuthState={props.isSigningUp ? AuthState.SignUp : AuthState.SignIn }\n            >\n            </AmplifyAuthenticator>\n\n        </div>\n\n    );\n}\n\nexport default AuthPage;","/Users/nishimuratomohiro/Capstone2/capstone2/menyu/src/components/Layout/MenyuButton.js",[],"/Users/nishimuratomohiro/Capstone2/capstone2/menyu/src/components/Layout/EditMenu.js",["125","126","127","128","129","130","131","132","133","134","135","136","137","138","139"],"import React from 'react';\nimport { useEffect, useState } from 'react/cjs/react.development';\n\nimport Storage from '@aws-amplify/storage';\nimport API from '@aws-amplify/api';\nimport { graphqlOperation } from '@aws-amplify/api-graphql';\nimport { createCategory } from '../../graphql/mutations';\nimport { createItem } from '../../graphql/mutations';\nimport { deleteItem } from '../../graphql/mutations';\nimport { updateItem } from '../../graphql/mutations';\nimport image from '../../assets/images/delete.png';\nimport image2 from '../../assets/images/edit.png';\nimport image3 from '../../assets/images/hide.png';\n\nimport classes from './EditMenu.module.css';\nimport { v4 as uuid } from 'uuid';\n\nconst EditMenu = (props) => {\n    // props = [bucket, region, restaurant, restaurantSetter]\n    //const [items, setItems] = useState(null);\n\n    const [categoryAdderOpened, setCategoryAdderOpened] = useState(false);\n    const [categoryName, setCategoryName] = useState('');\n\n    const [itemAdderOpened, setItemAdderOpened] = useState(false);\n    const [itemName, setItemName] = useState('');\n    const [itemDescription, setItemDescription] = useState('');\n    const [itemIngredients, setItemIngredients] = useState('');\n    const [itemPrice, setItemPrice] = useState('');\n    const [itemImage, setItemImage] = useState(null);\n    const [itemSpecialities, setItemSpecilities] =\n         useState({vege: false, vegan: false, halal: false, featured: false, hidden: false});\n    \n    const [currentCategory, setCurrentCategory] = useState(null);\n\n    const [deleteModalOpened, setDeleteModalOpened] = useState(false);\n    const [itemToBeDeleted, setItemToBeDeleted] = useState(null);\n\n    const [itemEditorOpened, setItemEditorOpened] = useState(false);\n    const [itemToBeEditted, setItemToBeEditted] = useState(null);\n\n    const [loadingMessage, setLoadingMessage] = useState(null);\n\n    const [qrCodeViewerOpened, setQRCodeViewerOpened] = useState(false);\n\n    const qrCodeURLBase = 'https://api.qrserver.com/v1/create-qr-code/?size=250x250&data='\n\n    console.log('rendering EditMenu')\n\n    const AddCategoryHandler = () => {\n        setCategoryAdderOpened(true)\n    }\n\n    const onAddCategoryConfirm = async() => {\n        console.log('from onAddCategoryConfirm');\n        if (categoryName === '') {\n            return\n        }\n\n        const inputData = { restaurantID: props.restaurant.id, name: categoryName }\n        try {\n            const newCategoryData = await API.graphql(graphqlOperation(createCategory, { input: inputData }))\n            const newCategory = newCategoryData.data.createCategory;\n\n            let newCategories = props.restaurant.categories.items\n            if (newCategories) {\n                console.log('current category', newCategories)\n                console.log('categories with items');\n                newCategories.push(newCategory);\n                console.log('updated category', newCategories)\n            } else {\n                console.log('categories empty');\n                newCategories = [newCategory]\n            }\n            \n            props.restaurantSetter((prevRestaurant) => {\n                let newRestaurant = prevRestaurant;\n                newRestaurant.categories.items = newCategories;\n                return newRestaurant;\n            })\n            console.log('from onAddCategoryConfirm success');\n        } catch (err) {\n            console.log('error creating category:', err);\n        }\n\n        setCategoryAdderOpened(false)\n    }\n\n    const onAddCategoryCancel = () => {\n        setCategoryAdderOpened(false)\n    }\n\n    const AddMenuHandler = () => {\n        setItemAdderOpened(true)\n    }\n\n    const onAddItemConfirm = async() => {\n        console.log('onAddItemConfirm');\n        if (itemName === '' || !itemImage || itemPrice === '') {\n            return\n        }\n\n        const extension = itemImage.name.split(\".\")[1];\n        const { type: mimeType } = itemImage;\n        const key = `${uuid()}${itemName}.${extension}`;\n        const url = `https://${props.bucket}.s3.${props.region}.amazonaws.com/public/${key}`;\n        const inputData = { categoryID: currentCategory.id,\n                            name: itemName,\n                            description: itemDescription,\n                            ingredients: itemIngredients,\n                            price: itemPrice,\n                            image: url,\n                            vegan: itemSpecialities.vegan,\n                            vege: itemSpecialities.vege,\n                            halal: itemSpecialities.halal,\n                            featured: itemSpecialities.featured,\n                            hidden: itemSpecialities.hidden,\n        }\n\n        try {\n            // s3 update\n            await Storage.put(key, itemImage, {contentType: mimeType});\n            // api update\n            const newItemData = await API.graphql(graphqlOperation(createItem, { input: inputData }))\n            console.log('from onAddItemConfirm: newItemData : ', newItemData);\n            const newItem = newItemData.data.createItem;\n\n            props.restaurantSetter((prevRestaurant) => {\n                const categoryIndex = prevRestaurant.categories.items.findIndex((obj => obj.id === currentCategory.id))\n                let updatedCategory = prevRestaurant.categories.items[categoryIndex];\n                if (!(updatedCategory.items)) {\n                    updatedCategory = { ...updatedCategory, items: {items: []}}\n                }\n                prevRestaurant.categories.items[categoryIndex] = updatedCategory;\n                prevRestaurant.categories.items[categoryIndex].items.items.push(newItem);\n                return prevRestaurant;\n            })\n\n        } catch (err) {\n            console.log('error creating items:', err);\n        }\n\n        setItemAdderOpened(false)\n        setItemName('');\n        setItemDescription('');\n        setItemIngredients('');\n        setItemImage(null);\n        setItemSpecilities({vege: false, vegan: false, halal: false, featured: false, hidden: false})\n        setCategoryAdderOpened(false)\n    }\n    \n    const onAddItemCancel = () => {\n        setItemAdderOpened(false)\n        setItemName('');\n        setItemDescription('');\n        setItemIngredients('');\n        setItemImage(null);\n        setItemSpecilities({vege: false, vegan: false, halal: false, featured: false, hidden: false})\n    }\n\n    const onDeleteButtonClicked = (item) => {\n        setDeleteModalOpened(true);\n        setItemToBeDeleted(item);\n    }\n\n    const onDeleteItemCanceled = () => {\n        setDeleteModalOpened(false);\n        setItemToBeDeleted(null);\n    }\n\n\n    const onDeleteItemConfirmed = async() => {\n        try {\n            //s3 update\n            const deletedKey = itemToBeDeleted.image.replace(`https://${props.bucket}.s3.${props.region}.amazonaws.com/public/`, '');\n            await Storage.remove(deletedKey);\n            //api update\n            const inputData = {id: itemToBeDeleted.id}\n            await API.graphql(graphqlOperation(deleteItem, { input: inputData }))\n            //restaurant update\n            await props.restaurantSetter((prevRestaurant) => {\n                const categoryIndex = prevRestaurant.categories.items.findIndex(obj => obj.id == itemToBeDeleted.categoryID)\n                const itemIndex = prevRestaurant.categories.items[categoryIndex].items.items.findIndex(obj => obj.id === itemToBeDeleted.id)\n                console.log('deleting item index:', itemIndex);\n                prevRestaurant.categories.items[categoryIndex].items.items.splice(itemIndex, 1);\n                return prevRestaurant;\n            })\n\n            console.log('from onItemDeleted', props.restaurant);\n        } catch(err) {\n            console.log('error deleting item', err);\n        }\n        setDeleteModalOpened(false);\n        setItemToBeDeleted(null);\n    }\n\n    const onEditItemButtonClicked = (item) => {\n        setItemEditorOpened(true);\n        setItemToBeEditted(item);\n    }\n\n    const onEditItemCanceled = () => {\n        setItemEditorOpened(false);\n        setItemToBeEditted(null);\n    }\n\n    const onEditItemConfirmed = async() => {\n        console.log('onEditItemConfirmed start')\n        try {\n            //s3 update\n            let url = itemToBeEditted.image\n            console.log('onEditItemConfirmed 1')\n            if (itemImage) {\n                //1. s3 delete\n                console.log('onEditItemConfirmed 2')\n                const deletedKey = itemToBeEditted.image.replace(`https://${props.bucket}.s3.${props.region}.amazonaws.com/public/`, '');\n                await Storage.remove(deletedKey);\n                //2. s3 upload\n                console.log('onEditItemConfirmed 3')\n                const extension = itemImage.name.split(\".\")[1];\n                const { type: mimeType } = itemImage;\n                const key = `${uuid()}${itemToBeEditted.name}.${extension}`;\n                url = `https://${props.bucket}.s3.${props.region}.amazonaws.com/public/${key}`;\n                await Storage.put(key, itemImage, {contentType: mimeType});\n            }\n            console.log('onEditItemConfirmed 4')\n            //api update\n            const inputData = { \n                                id: itemToBeEditted.id,\n                                name: itemToBeEditted.name,\n                                description: itemToBeEditted.description,\n                                ingredients: itemToBeEditted.ingredients,\n                                price: itemToBeEditted.price,\n                                image: url,\n                                vegan: itemToBeEditted.vegan,\n                                vege: itemToBeEditted.vege,\n                                halal: itemToBeEditted.halal,\n                                featured: itemToBeEditted.featured,\n                                hidden: itemToBeEditted.hidden,\n            }\n            const updatedItemData = await API.graphql(graphqlOperation(updateItem, { input: inputData }))\n            const updatedItem = updatedItemData.data.updateItem;\n            console.log('onEditItemConfirmed 5')\n            //restaurant update\n            props.restaurantSetter((prevRestaurant) => {\n                const categoryIndex = prevRestaurant.categories.items.findIndex(obj => obj.id == itemToBeEditted.categoryID)\n                const itemIndex = prevRestaurant.categories.items[categoryIndex].items.items.findIndex(obj => obj.id === itemToBeEditted.id)\n                console.log('deleting item index:', itemIndex);\n                prevRestaurant.categories.items[categoryIndex].items.items[itemIndex] = updatedItem;\n                return prevRestaurant;\n            })\n            console.log('onEditItemConfirmed 5')\n        } catch(err) {\n            console.log('error onEditItemConfirmed:', err)\n        }\n        setItemEditorOpened(false);\n        setItemToBeEditted(null);\n    }\n\n    const onHideButtonClicked = async(item) => {\n        console.log('from onHideButtonClicked: ', item)\n        setLoadingMessage('hiding from Menu...');\n        await changeItemVisibility(item, true);\n    }\n\n    const onRevealButtonClicked = async(item) => {\n        console.log('from onRevealButtonClicked: ', item)\n        setLoadingMessage('revealing to Menu ...');\n        await changeItemVisibility(item, false);\n    }\n\n    const changeItemVisibility = async(item, hidden) => {\n        try {\n            const inputData = {\n                id: item.id,\n                hidden: hidden\n            }\n            const updatedItemData = await API.graphql(graphqlOperation(updateItem, { input: inputData }))\n            const updatedItem = updatedItemData.data.updateItem;\n            //restaurant update\n            props.restaurantSetter((prevRestaurant) => {\n                const categoryIndex = prevRestaurant.categories.items.findIndex(obj => obj.id == item.categoryID)\n                const itemIndex = prevRestaurant.categories.items[categoryIndex].items.items.findIndex(obj => obj.id === item.id)\n                prevRestaurant.categories.items[categoryIndex].items.items[itemIndex] = updatedItem;\n                return prevRestaurant;\n            })\n        } catch(err) {\n            console.log('error toggling hidden: ', err)\n        }\n        setLoadingMessage(null);\n    }\n\n    const onQRCodeRequested = () => {\n        setQRCodeViewerOpened(true);\n    }\n\n    const onQRCodeClosed = () => {\n        setQRCodeViewerOpened(false);\n    }\n\n    return (\n        <div className={classes.editMenu}>\n            {loadingMessage && (\n                <div>\n                    <div className={classes.backdrop}/>\n                    <div className={classes.loading}>\n                        <p className={classes.loadingText}>{loadingMessage}</p>\n                    </div>\n                </div>\n            )}\n            {qrCodeViewerOpened && (\n                <div>\n                    <div className={classes.backdrop} onClick={onQRCodeClosed} />\n                    <div className={classes.qrCodeContainer}>\n                        <img src={qrCodeURLBase + 'new-feature.d1ac5hakempkoy.amplifyapp.com' + props.restaurant.id}></img>\n                    </div>\n                </div>\n\n            )}\n            {/* <div>\n                <button onClick={onQRCodeRequested}>QR Code</button>\n            </div> */}\n            <div className={classes.content}>\n                <div className={classes.mainText}>\n                    Your Menu\n                </div>\n                <div className={classes.editArea}>\n                    <div className={classes.categoryArea}>\n                        {categoryAdderOpened && (\n                            <div>\n                                <div className={classes.backdrop} onClick={onAddCategoryCancel} />\n                                <div className={classes.editorContainer}>\n                                    <div className={classes.editorText}>Category Name: </div>\n                                    <div className={classes.editorInputArea}>\n                                        <input className={classes.editorInput} type='text' onChange={(e) => {setCategoryName(e.target.value)}} />\n                                        <button className={classes.editorConfirmButton} onClick={onAddCategoryConfirm}>Confirm</button>\n                                        <button className={classes.editorCancelButton} onClick={onAddCategoryCancel}>Cancel</button>\n                                    </div>\n                                </div>\n                            </div>\n                        )}\n                        <div className={classes.Ctext}>\n                            Categories\n                        </div>\n                        <div className={classes.Citems}>\n                        {\n                            (props.restaurant.categories.items) && (\n                                (props.restaurant.categories.items.length > 0) ? (\n                                    props.restaurant.categories.items.map((category, index) => (\n                                        <div className={classes.eachItem} key={category.id ? category.id : index}>\n                                            {/* <div className={classes.eachItem}> */}\n                                            <button className={classes.button} onClick={() => setCurrentCategory({id: category.id, name: category.name})}>{category.name}</button>\n                                            {/* </div> */}\n                                        </div>\n                                    ))\n                                ) : (\n                                    <p>Add Your Restaurant Menu Category!</p>\n                                )\n                            )\n                        }\n                        </div>\n                        <div className={classes.buttonSection}>\n                            <button className={classes.Cbutton} onClick={AddCategoryHandler}>+ Add</button>\n                        </div>\n                    </div>\n                    {deleteModalOpened && (\n                        <div>\n                            <div className={classes.backdrop} onClick={onDeleteItemCanceled} />\n                            <div className={classes.deleteModalContainer}>\n                                <div className={classes.editorDeleteText}>Do you want to delete this?</div>\n                                <button  className={classes.editorYesButton} onClick={onDeleteItemConfirmed}>Yes</button>\n                                <button className={classes.editorNoButton} onClick={onDeleteItemCanceled}>No</button>\n                            </div>\n                        </div>\n                    )}\n                    {itemEditorOpened && (\n                        <div>\n                            <div className={classes.backdrop} onClick={onEditItemCanceled} />\n                            <div className={classes.editorEditContainer}>\n                                <p className={classes.editorEditText}>Edit an Item</p>\n                                <div className={classes.editorEditArea}>  \n                                    <div className={classes.editorEditInput}>\n                                        <div className={classes.editorItemInput}>Name: <input className={classes.editorEditName} type='text' placeholder={itemToBeEditted.name} onChange={(e) => {setItemToBeEditted((prev) => {return {...prev, name: e.target.value}})}} /></div>\n                                        <div className={classes.editorItemInput2}>Description: <textarea className={classes.editorEditDescription} type='text' placeholder={itemToBeEditted.description} onChange={(e) => {setItemToBeEditted((prev) => {return {...prev, description: e.target.value}})}} /></div>\n                                        <div className={classes.editorItemInput2}>Ingredients: <textarea className={classes.editorEditIngredients} type='text' placeholder={itemToBeEditted.ingredients} onChange={(e) => {setItemToBeEditted((prev) => {return {...prev, ingredients: e.target.value}})}} /></div>\n                                        {/* <div className={classes.editorEditArea}>Price: <input className={classes.editorInput} type='text' placeholder={itemToBeEditted.price} onChange={(e) => {setItemToBeEditted((prev) => {return {...prev, price: e.target.value}})}} /></div>\n                                        <div className={classes.editorEditArea}>Image: <input type='file' onChange={(e) => {setItemImage(e.target.files[0])}} /></div> */}\n                                    </div>\n                                    <div className={classes.editorEditButtons}>\n                                        <div className={classes.editorItemInput}>Price: <input className={classes.editorEditPrice} type='text' placeholder={itemToBeEditted.price} onChange={(e) => {setItemToBeEditted((prev) => {return {...prev, price: e.target.value}})}} /></div>\n                                        <div className={classes.editorItemInput}>Image: <input className={classes.editorEditImage} type='file' onChange={(e) => {setItemImage(e.target.files[0])}} /></div>\n                                        <div className={classes.editorCheckBox}>\n                                            <input type=\"checkbox\" id=\"vege\" checked={itemToBeEditted.vege} onClick={\n                                                (e) => {setItemToBeEditted((prev) => {return {...prev, vege: e.target.checked}})}\n                                                } />\n                                            <label for=\"vege\"> vegetarian</label>\n                                        </div>\n                                        <div className={classes.editorCheckBox}>\n                                            <input type=\"checkbox\" id=\"vegan\" checked={itemToBeEditted.vegan} onClick={\n                                                (e) => {setItemToBeEditted((prev) => {return {...prev, vegan: e.target.checked}})}\n                                                } />\n                                            <label for=\"vegan\"> vegan</label>\n                                        </div>\n                                        <div className={classes.editorCheckBox}>\n                                            <input type=\"checkbox\" id=\"halal\" checked={itemToBeEditted.halal} onClick={\n                                                (e) => {setItemToBeEditted((prev) => {return {...prev, halal: e.target.checked}})}\n                                                } />\n                                            <label for=\"halal\"> halal</label>\n                                        </div>\n                                        <div className={classes.editorCheckBox}>\n                                            <input type=\"checkbox\" id=\"featured\" checked={itemToBeEditted.featured} onClick={\n                                                (e) => {setItemToBeEditted((prev) => {return {...prev, featured: e.target.checked}})}\n                                                } />\n                                            <label for=\"featured\"> featured</label>\n                                        </div>\n                                        <div>\n                                            <button className={classes.editorSaveButton} onClick={onEditItemConfirmed}>Save</button>\n                                            <button className={classes.editorCancelButton} onClick={onEditItemCanceled}>Cancel</button>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    )}\n                    <hr size=\"1\" color=\"#6B2200\" className={classes.line}></hr>\n                    <div className={classes.currentCategoryArea}>\n                    {\n                        (currentCategory) ? (\n                            <div>\n                                {/* <p>currentCategory: {currentCategory.name} </p> */}\n                                <div className={classes.itemContent}>\n                                    <div className={classes.Itext}> Items</div>\n                                    <div className={classes.itemArea}>\n                                        {\n                                            props.restaurant.categories.items.filter((category) => {\n                                                return category.id === currentCategory.id\n                                            }).map((category, index) => {\n                                                return category.items.items.map((item, index) => {\n                                                    if (!(item.hidden)) {\n                                                        return (\n                                                            <div className={classes.itemlist} key={item.id ? item.id : index}>\n                                                                <div className={classes.itemDescription}>\n                                                                    <div  className={classes.itemImage1}>\n                                                                        <img className={classes.itemImage} src={item.image}></img>\n                                                                    </div>\n                                                                    <div className={classes.itemName1}>\n                                                                        <p className={classes.itemName}>{item.name}</p>\n                                                                    </div>\n                                                                </div>\n                                                                <div className={classes.itemButtons}>\n                                                                    <button className={classes.itemButton} onClick={() => onDeleteButtonClicked(item)}><img className={classes.buttonImage} src={image}/></button>\n                                                                    <button className={classes.itemButton} onClick={() => onEditItemButtonClicked(item)}><img className={classes.buttonImage} src={image2}/></button>\n                                                                    <button className={classes.itemButton} onClick={async() => await onHideButtonClicked(item)}><img className={classes.buttonImage} src={image3}/></button>\n                                                                </div>\n                                                            </div>\n                                                        )\n                                                    }\n                                                }) \n                                            })\n                                        }\n                                    </div>\n                                    <div>\n                                        {\n                                            props.restaurant.categories.items.filter((category) => {\n                                                return category.id === currentCategory.id\n                                            }).map((category, index) => {\n                                                return category.items.items.map((item, index) => {\n                                                    if (item.hidden) {\n                                                        return (\n                                                            <div className={classes.itemlist} key={item.id ? item.id : index}>\n                                                                <div className={classes.itemDescription}>\n                                                                    <div  className={classes.itemImage1}>\n                                                                        <img className={classes.itemImage} src={item.image}></img>\n                                                                    </div>\n                                                                    <div className={classes.itemName1}>\n                                                                        <p className={classes.itemName}>{item.name}</p>\n                                                                        </div>\n                                                                </div>\n                                                                <div className={classes.itemButtons}>\n                                                                    <button className={classes.itemButton} onClick={() => onDeleteButtonClicked(item)}><img className={classes.buttonImage} src={image}/></button>\n                                                                    <button className={classes.itemButton} onClick={() => onEditItemButtonClicked(item)}><img className={classes.buttonImage} src={image2}/></button>\n                                                                    <button onClick={async() => await onRevealButtonClicked(item)}>reveal to menu</button>\n                                                                </div>\n                                                            </div>\n                                                        )\n                                                    }\n                                                }) \n                                            })\n                                        }\n                                    </div>\n                                    {itemAdderOpened && (\n                                        <div>\n                                            <div className={classes.backdrop} onClick={onAddItemCancel} />\n                                            <div className={classes.editorEditContainer}>\n                                                <p className={classes.editorEditText}> Add a new Item </p>\n                                                <div className={classes.editorEditArea}>  \n                                                    <div className={classes.editorEditInput}>\n                                                        <div className={classes.editorItemInput}>Name: <input className={classes.editorEditName} type='text' onChange={(e) => {setItemName(e.target.value)}} /></div>\n                                                        <div className={classes.editorItemInput2}>Description: <textarea className={classes.editorEditDescription} type='text' onChange={(e) => {setItemDescription(e.target.value)}} /></div>\n                                                        <div className={classes.editorItemInput2}>Ingredients: <textarea className={classes.editorEditIngredients} type='text' onChange={(e) => {setItemIngredients(e.target.value)}} /></div>\n                                                    </div>\n                                                    <div className={classes.editorEditButtons}>\n                                                        <div className={classes.editorItemInput}>price: $<input className={classes.editorEditPrice} type='text' onChange={(e) => {setItemPrice(e.target.value)}} /></div>\n                                                        <div className={classes.editorItemInput}>Image: <input className={classes.editorEditImage} type='file' onChange={(e) => {setItemImage(e.target.files[0])}} /></div>\n                                                        <div className={classes.editorCheckBox}>\n                                                            <input type=\"checkbox\" id=\"vege\" onClick={\n                                                                (e) => {setItemSpecilities((prev) => {return {...prev, vege: e.target.checked}})}\n                                                                } />\n                                                            <label for=\"vege\">vegetarian</label>\n                                                        </div>\n                                                        <div className={classes.editorCheckBox}>\n                                                            <input type=\"checkbox\" id=\"vegan\" onClick={\n                                                                (e) => {setItemSpecilities((prev) => {return {...prev, vegan: e.target.checked}})}\n                                                                } />\n                                                            <label for=\"vegan\">vegan</label>\n                                                        </div>\n                                                        <div className={classes.editorCheckBox}>\n                                                            <input type=\"checkbox\" id=\"halal\" onClick={\n                                                                (e) => {setItemSpecilities((prev) => {return {...prev, halal: e.target.checked}})}\n                                                                } />\n                                                            <label for=\"halal\">halal</label>\n                                                        </div>\n                                                        <div className={classes.editorCheckBox}>\n                                                            <input type=\"checkbox\" id=\"featured\" onClick={\n                                                                (e) => {setItemSpecilities((prev) => {return {...prev, featured: e.target.checked}})}\n                                                                } />\n                                                            <label for=\"featured\">featured</label>\n                                                        </div>\n                                                        <div>\n                                                            <button className={classes.editorSaveButton} onClick={onAddItemConfirm}>Save</button>\n                                                            <button className={classes.editorCancelButton} onClick={onAddItemCancel}>Cancel</button>\n                                                        </div>\n                                                    </div>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    )}\n                                    <button className={classes.addButton} onClick={AddMenuHandler}>+ Add</button>\n                                </div>\n                            </div>\n                        ) : (\n                            <p>choose category</p>\n                        )\n                    }\n                    </div>\n                </div>\n\n                \n            </div>\n        </div>\n    );\n}\n\nexport default EditMenu;","/Users/nishimuratomohiro/Capstone2/capstone2/menyu/src/components/Layout/HomeHeader.js",[],"/Users/nishimuratomohiro/Capstone2/capstone2/menyu/src/components/Layout/CreateRestaurant.js",[],"/Users/nishimuratomohiro/Capstone2/capstone2/menyu/src/components/Layout/EditRestaurant.js",["140"],"import React from 'react';\nimport { useEffect, useState } from 'react/cjs/react.development';\n\nimport Storage from '@aws-amplify/storage';\nimport API from '@aws-amplify/api';\nimport { graphqlOperation } from '@aws-amplify/api-graphql';\n\nimport { updateRestaurant } from '../../graphql/mutations';\n\nimport { v4 as uuid } from 'uuid';\n\nimport classes from './EditRestaurant.module.css';\n\nconst EditRestaurant = (props) => {\n    const [logoEditorOpened, setLogoEditorOpened] = useState(false);\n    const [nameEditorOpened, setNameEditorOpened] = useState(false);\n\n    const [nameEditted, setNameEditted] = useState('');\n    const [logoEditted, setLogoEditted] = useState(null);\n\n    console.log('rendering EditRestaurant')\n\n    useEffect(() => {\n    }, [])\n\n    const EditNameButtonClickHandler = () => {\n        setNameEditorOpened(true);\n    }\n\n    const EditLogoButtonClickHandler = () => {\n        setLogoEditorOpened(true);\n    }\n\n    const NameChangeHandler = (event) => {\n        setNameEditted(event.target.value);\n    }\n\n    const LogoChangeHandler = (event) => {\n        setLogoEditted(event.target.files[0]);\n    }\n\n    const onNameEditConfirm = async() => {\n        if (nameEditted === '') {\n            return\n        }\n        const inputData = { id: props.restaurant.id, name: nameEditted }\n        console.log('onNameEditConfirm:', nameEditted);\n        console.log('restaurant id:', props.restaurant.id)\n        // update \n        try {\n            await API.graphql(graphqlOperation(updateRestaurant, { input: inputData }))\n            props.restaurantSetter((prevRestaurant) => {\n               return { ...prevRestaurant, name: nameEditted}\n            })\n            console.log('onNameEditConfirm Finished');\n        } catch (err) {\n            console.log('error updating restaurant name:', err);\n        }\n\n        setNameEditorOpened(false);\n    }\n    const onLogoEditConfirm = async() => {\n        if (!logoEditted) {\n            return\n        }\n        const extension = logoEditted.name.split(\".\")[1];\n        const { type: mimeType } = logoEditted;\n        const key = `${uuid()}${props.restaurant.name}.${extension}`;\n        const url = `https://${props.bucket}.s3.${props.region}.amazonaws.com/public/${key}`;\n        const inputData = { id: props.restaurant.id, logo: url }\n        //delete prev logo from bucket\n        try {\n            const deletedKey = props.restaurant.logo.replace(`https://${props.bucket}.s3.${props.region}.amazonaws.com/public/`, '');\n            await Storage.remove(deletedKey);\n        } catch (err) {\n            console.log('error deleting logo:', err);\n        }\n        // update \n        try {\n            await Storage.put(key, logoEditted, {contentType: mimeType});\n            await API.graphql(graphqlOperation(updateRestaurant, { input: inputData }))\n            props.restaurantSetter((prevRestaurant) => {\n                //return {name: prevRestaurant.name, logo: url}\n                return { ...prevRestaurant, logo: url }\n            })\n        } catch (err) {\n            console.log('error updating restaurant logo:', err);\n        }\n\n        setLogoEditorOpened(false);\n    }\n\n    const onNameEditCancel = () => {\n        setNameEditorOpened(false);\n        setNameEditted('');\n    }\n    const onLogoEditCancel = () => {\n        setLogoEditorOpened(false);\n        setLogoEditted(null);\n    }\n    \n    return (\n        <div className={classes.editRestaurant}>\n            {nameEditorOpened && (\n                <div>\n                    <div className={classes.backdrop} onClick={onNameEditCancel} />\n                    <div className={classes.editorContainer}>\n                        <div className={classes.editorText}>Restaurant Name:</div>\n                        <div className={classes.editorInputArea}>\n                            <input className={classes.editorInput} type='text' placeholder={props.restaurant.name} onChange={NameChangeHandler} />\n                            <button className={classes.editorButton} onClick={onNameEditConfirm}>Confirm</button>\n                            <button className={classes.editorButton} onClick={onNameEditCancel}>Cancel</button>\n                        </div>\n                    </div>\n                </div>\n            )}\n            {logoEditorOpened && (\n                <div>\n                    <div className={classes.backdrop} onClick={onLogoEditCancel} />\n                    <div className={classes.editorContainer}>\n                        <div className={classes.editorText}>New Logo: </div>\n                        <div className={classes.editorInputArea}>\n                            <input className={classes.editorFileButton} type='file' onChange={LogoChangeHandler} />\n                            <button className={classes.editorButton} onClick={onLogoEditConfirm}>Confirm</button>\n                            <button className={classes.editorButton} onClick={onLogoEditCancel}>Cancel</button>\n                        </div>\n                    </div>\n                </div>\n            )}\n            <div className={classes.content}>\n                <div className={classes.text}>\n                    Your Restaurant\n                </div>\n                <div className={classes.editArea}>\n                    <div className={classes.nameArea}>\n                        <div className={classes.restaurantName}>\n                            Restaurant Name\n                        </div>\n                        <div className={classes.name}>\n                            {props.restaurant.name}\n                        </div>\n                        <div className={classes.nameButton}>\n                            <button className={classes.button} onClick={EditNameButtonClickHandler}>edit</button>\n                        </div>\n                    </div>\n                    <hr size=\"1\" color=\"#6B2200\" className={classes.line}></hr>\n                    <div className={classes.logoArea}>\n                        <div className={classes.logoText}>\n                            Restaurant Logo\n                        </div>\n                        <div className={classes.logo}>\n                            <img className={classes.logosrc} src={props.restaurant.logo}></img>\n                        </div>\n                        <div className={classes.logobutton}>\n                            <button className={classes.button} onClick={EditLogoButtonClickHandler}>edit</button>\n                        </div> \n                    </div>\n                </div>\n            </div>\n\n        </div>\n    );\n}\n\nexport default EditRestaurant;","/Users/nishimuratomohiro/Capstone2/capstone2/menyu/src/components/Layout/DropDownMenu.js",[],{"ruleId":"141","replacedBy":"142"},{"ruleId":"143","replacedBy":"144"},{"ruleId":"145","severity":1,"message":"146","line":3,"column":25,"nodeType":"147","messageId":"148","endLine":3,"endColumn":33},{"ruleId":"145","severity":1,"message":"149","line":13,"column":10,"nodeType":"147","messageId":"148","endLine":13,"endColumn":30},{"ruleId":"145","severity":1,"message":"150","line":1,"column":8,"nodeType":"147","messageId":"148","endLine":1,"endColumn":12},{"ruleId":"151","severity":1,"message":"152","line":26,"column":21,"nodeType":"153","endLine":26,"endColumn":64},{"ruleId":"151","severity":1,"message":"152","line":22,"column":21,"nodeType":"153","endLine":22,"endColumn":76},{"ruleId":"151","severity":1,"message":"152","line":26,"column":21,"nodeType":"153","endLine":26,"endColumn":74},{"ruleId":"145","severity":1,"message":"154","line":9,"column":15,"nodeType":"147","messageId":"148","endLine":9,"endColumn":19},{"ruleId":"145","severity":1,"message":"155","line":2,"column":10,"nodeType":"147","messageId":"148","endLine":2,"endColumn":19},{"ruleId":"145","severity":1,"message":"156","line":3,"column":10,"nodeType":"147","messageId":"148","endLine":3,"endColumn":18},{"ruleId":"145","severity":1,"message":"157","line":3,"column":20,"nodeType":"147","messageId":"148","endLine":3,"endColumn":29},{"ruleId":"145","severity":1,"message":"158","line":5,"column":8,"nodeType":"147","messageId":"148","endLine":5,"endColumn":11},{"ruleId":"145","severity":1,"message":"159","line":6,"column":10,"nodeType":"147","messageId":"148","endLine":6,"endColumn":26},{"ruleId":"145","severity":1,"message":"160","line":2,"column":10,"nodeType":"147","messageId":"148","endLine":2,"endColumn":14},{"ruleId":"145","severity":1,"message":"161","line":6,"column":32,"nodeType":"147","messageId":"148","endLine":6,"endColumn":45},{"ruleId":"145","severity":1,"message":"162","line":6,"column":47,"nodeType":"147","messageId":"148","endLine":6,"endColumn":60},{"ruleId":"145","severity":1,"message":"157","line":2,"column":10,"nodeType":"147","messageId":"148","endLine":2,"endColumn":19},{"ruleId":"163","severity":1,"message":"164","line":182,"column":95,"nodeType":"165","messageId":"166","endLine":182,"endColumn":97},{"ruleId":"163","severity":1,"message":"164","line":246,"column":95,"nodeType":"165","messageId":"166","endLine":246,"endColumn":97},{"ruleId":"163","severity":1,"message":"164","line":282,"column":95,"nodeType":"165","messageId":"166","endLine":282,"endColumn":97},{"ruleId":"145","severity":1,"message":"167","line":293,"column":11,"nodeType":"147","messageId":"148","endLine":293,"endColumn":28},{"ruleId":"151","severity":1,"message":"152","line":315,"column":25,"nodeType":"153","endLine":315,"endColumn":118},{"ruleId":"168","severity":1,"message":"169","line":438,"column":95,"nodeType":"170","messageId":"171","endLine":438,"endColumn":97},{"ruleId":"151","severity":1,"message":"152","line":444,"column":73,"nodeType":"153","endLine":444,"endColumn":125},{"ruleId":"151","severity":1,"message":"152","line":451,"column":152,"nodeType":"153","endLine":451,"endColumn":202},{"ruleId":"151","severity":1,"message":"152","line":452,"column":154,"nodeType":"153","endLine":452,"endColumn":205},{"ruleId":"151","severity":1,"message":"152","line":453,"column":161,"nodeType":"153","endLine":453,"endColumn":212},{"ruleId":"168","severity":1,"message":"169","line":467,"column":95,"nodeType":"170","messageId":"171","endLine":467,"endColumn":97},{"ruleId":"151","severity":1,"message":"152","line":473,"column":73,"nodeType":"153","endLine":473,"endColumn":125},{"ruleId":"151","severity":1,"message":"152","line":480,"column":152,"nodeType":"153","endLine":480,"endColumn":202},{"ruleId":"151","severity":1,"message":"152","line":481,"column":154,"nodeType":"153","endLine":481,"endColumn":205},{"ruleId":"151","severity":1,"message":"152","line":152,"column":29,"nodeType":"153","endLine":152,"endColumn":90},"no-native-reassign",["172"],"no-negated-in-lhs",["173"],"no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","'AmplifyAuthenticator' is defined but never used.","'Auth' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'uuid' is defined but never used.","'useParams' is defined but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.","'API' is defined but never used.","'graphqlOperation' is defined but never used.","'Link' is defined but never used.","'AmplifySignIn' is defined but never used.","'AmplifySignUp' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'onQRCodeRequested' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-global-assign","no-unsafe-negation"]